name: Quantum Application E2E Pipeline

on:
  push:
    branches: [ main, master ]
    paths:
      - 'source/circuits/**'
      - '.github/workflows/e2e-pipeline.yml'
  pull_request:
    branches: [ main, master ]
    paths:
      - 'source/circuits/**'
  workflow_dispatch:
    inputs:
      source_file:
        description: 'Source file to process (relative to source/circuits/)'
        required: false
        default: ''
      simulator:
        description: 'Simulator to use (qiskit, cirq, braket)'
        required: false
        # Default to qiskit if not provided via dispatch
        default: 'qiskit'
      shots:
        description: 'Number of shots for simulation'
        required: false
        # Default to 1024 if not provided via dispatch
        default: '1024'

jobs:
  setup:
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
    runs-on: ${{ matrix.os }}
    outputs:
      source_files: ${{ steps.find-files.outputs.files }}
      # Pass simulator and shots inputs to other jobs
      simulator: ${{ github.event.inputs.simulator || 'qiskit' }}
      shots: ${{ github.event.inputs.shots || '1024' }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          # Fetch all history for accurate diffs
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      - name: Install dependencies
        shell: bash
        run: |
          python -m pip install --upgrade pip
          pip install quantum-cli-sdk
          # Install quantum hardware libraries
          pip install qiskit qiskit-ibm-runtime cirq amazon-braket-sdk
          # Ensure requirements.txt exists and is used
          if [ -f requirements.txt ]; then
            pip install -r requirements.txt
          else
            echo "requirements.txt not found, skipping."
          fi

      - name: Find source files to process
        id: find-files
        shell: python
        run: |
          import glob, json, os
          input_file = "${{ github.event.inputs.source_file }}"
          if input_file:
              # Use forward slashes consistently
              relative_files = [input_file.replace('\\\\', '/')]
          else:
              files = glob.glob('source/circuits/**/*.py', recursive=True)
              # Use forward slashes consistently
              relative_files = [os.path.relpath(f, 'source/circuits').replace('\\\\', '/') for f in files if os.path.isfile(f)]
          print(f'Found files: {relative_files}')
          output_json = json.dumps(relative_files)
          print(f'Output JSON: {output_json}')
          with open(os.environ['GITHUB_OUTPUT'], 'a') as fh:
              print(f'files={output_json}', file=fh)

      - name: Configure Git for commits
        run: |
          git config --local user.name "github-actions[bot]"
          git config --local user.email "41898282+github-actions[bot]@users.noreply.github.com"

  # --------------------------------------------------------------------------
  # IR Generation & Validation
  # --------------------------------------------------------------------------
  generate-ir:
    needs: setup
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        source_file: ${{ fromJson(needs.setup.outputs.source_files) }}
      # Don't fast-fail if one circuit fails generation
      fail-fast: false
    runs-on: ${{ matrix.os }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'
      - name: Install dependencies
        shell: bash
        run: |
          pip install quantum-cli-sdk
          # Install quantum hardware libraries
          pip install qiskit qiskit-ibm-runtime cirq amazon-braket-sdk
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
      - name: Configure Git
        run: |
          git config --local user.name "github-actions[bot]"
          git config --local user.email "41898282+github-actions[bot]@users.noreply.github.com"

      - name: Generate Base OpenQASM IR
        shell: bash
        run: |
          mkdir -p ir/openqasm
          quantum-cli ir generate \
            --source source/circuits/${{ matrix.source_file }} \
            --dest ir/openqasm/"${{ matrix.source_file }}.qasm"
          echo "Generated Base OpenQASM IR for ${{ matrix.source_file }}"

      - name: Commit generated IR
        shell: bash
        run: |
          git add ir/openqasm/"${{ matrix.source_file }}.qasm"
          # Commit only if changes detected
          if [[ -n $(git status --porcelain ir/openqasm/"${{ matrix.source_file }}.qasm") ]]; then
            git commit -m "ci: Generate base OpenQASM for ${{ matrix.source_file }} (OS: ${{ matrix.os }})"
            # Retry push on transient errors - This part is risky with parallel jobs
            git push || (sleep 5 && git pull --rebase && git push) || echo "Push failed for base IR ${{ matrix.source_file }} on ${{ matrix.os }}"
          else
            echo "No changes to commit for base IR ${{ matrix.source_file }} on ${{ matrix.os }}"
          fi

  validate:
    needs: generate-ir # Depends on base IR generation
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        source_file: ${{ fromJson(needs.setup.outputs.source_files) }}
      fail-fast: false
    runs-on: ${{ matrix.os }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'
      - name: Install dependencies
        shell: bash
        run: |
          pip install quantum-cli-sdk
          # Install quantum hardware libraries
          pip install qiskit qiskit-ibm-runtime cirq amazon-braket-sdk
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
      - name: Configure Git
        run: |
          git config --local user.name "github-actions[bot]"
          git config --local user.email "41898282+github-actions[bot]@users.noreply.github.com"

      - name: Validate Base OpenQASM IR
        shell: bash
        run: |
          mkdir -p results/validation
          # Check if the IR file exists before validating
          if [ -f "ir/openqasm/${{ matrix.source_file }}.qasm" ]; then
            quantum-cli ir validate \
              ir/openqasm/${{ matrix.source_file }}.qasm \
              --output results/validation/"${{ matrix.source_file }}.json"
            echo "Validated Base OpenQASM for ${{ matrix.source_file }} on ${{ matrix.os }}"
          else
            echo "Skipping validation, IR file not found: ir/openqasm/${{ matrix.source_file }}.qasm on ${{ matrix.os }}"
            # Create an empty placeholder result? Or fail the step? Let's log and continue.
            mkdir -p results/validation && echo '{"status": "skipped", "reason": "Input IR file not found"}' > results/validation/"${{ matrix.source_file }}.json"
          fi

      - name: Commit validation results
        shell: bash
        run: |
          git add results/validation/"${{ matrix.source_file }}.json"
          if [[ -n $(git status --porcelain results/validation/"${{ matrix.source_file }}.json") ]]; then
            git commit -m "ci: Add validation results for ${{ matrix.source_file }} (OS: ${{ matrix.os }})"
            git push || (sleep 5 && git pull --rebase && git push) || echo "Push failed for validation results ${{ matrix.source_file }} on ${{ matrix.os }}"
          else
            echo "No changes to commit for validation results ${{ matrix.source_file }} on ${{ matrix.os }}"
          fi

  security-scan:
    needs: validate # Depends on validation completing
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        source_file: ${{ fromJson(needs.setup.outputs.source_files) }}
      fail-fast: false
    runs-on: ${{ matrix.os }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'
      - name: Install dependencies
        shell: bash
        run: |
          pip install quantum-cli-sdk
          # Install quantum hardware libraries
          pip install qiskit qiskit-ibm-runtime cirq amazon-braket-sdk
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
      - name: Configure Git
        run: |
          git config --local user.name "github-actions[bot]"
          git config --local user.email "41898282+github-actions[bot]@users.noreply.github.com"

      - name: Security Scan Base OpenQASM IR
        shell: bash
        run: |
          # Standardized path
          mkdir -p results/security
          if [ -f "ir/openqasm/${{ matrix.source_file }}.qasm" ]; then
            quantum-cli security scan \
              ir/openqasm/${{ matrix.source_file }}.qasm \
              --output results/security/"${{ matrix.source_file }}.json"
            echo "Security scan completed for ${{ matrix.source_file }} on ${{ matrix.os }}"
          else
             echo "Skipping security scan, IR file not found: ir/openqasm/${{ matrix.source_file }}.qasm on ${{ matrix.os }}"
             mkdir -p results/security && echo '{"status": "skipped", "reason": "Input IR file not found"}' > results/security/"${{ matrix.source_file }}.json"
          fi

      - name: Commit security reports
        shell: bash
        run: |
          # Standardized path
          git add results/security/"${{ matrix.source_file }}.json"
          if [[ -n $(git status --porcelain results/security/"${{ matrix.source_file }}.json") ]]; then
            git commit -m "ci: Add security report for ${{ matrix.source_file }} (OS: ${{ matrix.os }})"
            git push || (sleep 5 && git pull --rebase && git push) || echo "Push failed for security report ${{ matrix.source_file }} on ${{ matrix.os }}"
          else
            echo "No changes to commit for security report ${{ matrix.source_file }} on ${{ matrix.os }}"
          fi

  # --------------------------------------------------------------------------
  # Optimization & Mitigation
  # --------------------------------------------------------------------------
  optimize:
    # Run after security scan
    needs: security-scan
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        source_file: ${{ fromJson(needs.setup.outputs.source_files) }}
      fail-fast: false
    runs-on: ${{ matrix.os }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'
      - name: Install dependencies
        shell: bash
        run: |
          pip install quantum-cli-sdk
          # Install quantum hardware libraries
          pip install qiskit qiskit-ibm-runtime cirq amazon-braket-sdk
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
      - name: Configure Git
        run: |
          git config --local user.name "github-actions[bot]"
          git config --local user.email "41898282+github-actions[bot]@users.noreply.github.com"

      - name: Optimize Base OpenQASM IR
        shell: bash
        run: |
          # Check if input exists
          if [ -f "ir/openqasm/${{ matrix.source_file }}.qasm" ]; then
            mkdir -p ir/openqasm/optimized
            quantum-cli ir optimize \
              ir/openqasm/${{ matrix.source_file }}.qasm \
              --output ir/openqasm/optimized/"${{ matrix.source_file }}.qasm"
            echo "Optimized Base OpenQASM for ${{ matrix.source_file }} on ${{ matrix.os }}"
          else
            echo "Skipping optimization, input file not found: ir/openqasm/${{ matrix.source_file }}.qasm on ${{ matrix.os }}"
            # Ensure directory exists even if skipped, maybe create empty output?
            mkdir -p ir/openqasm/optimized
            # echo "" > ir/openqasm/optimized/"${{ matrix.source_file }}.qasm" # Optional: create empty file
          fi

      - name: Commit optimized IR
        shell: bash
        run: |
          # Only commit if the optimized file was actually created and has changes
          if [ -f "ir/openqasm/optimized/${{ matrix.source_file }}.qasm" ]; then
             git add ir/openqasm/optimized/"${{ matrix.source_file }}.qasm"
             if [[ -n $(git status --porcelain ir/openqasm/optimized/"${{ matrix.source_file }}.qasm") ]]; then
                git commit -m "ci: Add optimized OpenQASM for ${{ matrix.source_file }} (OS: ${{ matrix.os }})"
                git push || (sleep 5 && git pull --rebase && git push) || echo "Push failed for optimized IR ${{ matrix.source_file }} on ${{ matrix.os }}"
             else
               echo "No changes to commit for optimized IR ${{ matrix.source_file }} on ${{ matrix.os }}"
             fi
          else
            echo "Optimized file not found, skipping commit for ${{ matrix.source_file }} on ${{ matrix.os }}"
          fi

  mitigate:
    # Run after optimization
    needs: optimize
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        source_file: ${{ fromJson(needs.setup.outputs.source_files) }}
      fail-fast: false
    runs-on: ${{ matrix.os }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'
      - name: Install dependencies
        shell: bash
        run: |
          pip install quantum-cli-sdk
          # Install quantum hardware libraries
          pip install qiskit qiskit-ibm-runtime cirq amazon-braket-sdk
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
      - name: Configure Git
        run: |
          git config --local user.name "github-actions[bot]"
          git config --local user.email "41898282+github-actions[bot]@users.noreply.github.com"

      - name: Mitigate Optimized OpenQASM IR
        shell: bash
        run: |
          # Check if input exists
          if [ -f "ir/openqasm/optimized/${{ matrix.source_file }}.qasm" ]; then
            mkdir -p ir/openqasm/mitigated
            quantum-cli ir mitigate \
              ir/openqasm/optimized/${{ matrix.source_file }}.qasm \
              --output ir/openqasm/mitigated/"${{ matrix.source_file }}.qasm"
            echo "Mitigated Optimized OpenQASM for ${{ matrix.source_file }} on ${{ matrix.os }}"
          else
            echo "Skipping mitigation, input file not found: ir/openqasm/optimized/${{ matrix.source_file }}.qasm on ${{ matrix.os }}"
            mkdir -p ir/openqasm/mitigated # Ensure dir exists
          fi

      - name: Commit mitigated IR
        shell: bash
        run: |
          if [ -f "ir/openqasm/mitigated/${{ matrix.source_file }}.qasm" ]; then
            git add ir/openqasm/mitigated/"${{ matrix.source_file }}.qasm"
            if [[ -n $(git status --porcelain ir/openqasm/mitigated/"${{ matrix.source_file }}.qasm") ]]; then
              git commit -m "ci: Add mitigated OpenQASM for ${{ matrix.source_file }} (OS: ${{ matrix.os }})"
              git push || (sleep 5 && git pull --rebase && git push) || echo "Push failed for mitigated IR ${{ matrix.source_file }} on ${{ matrix.os }}"
            else
              echo "No changes to commit for mitigated IR ${{ matrix.source_file }} on ${{ matrix.os }}"
            fi
          else
            echo "Mitigated file not found, skipping commit for ${{ matrix.source_file }} on ${{ matrix.os }}"
          fi

  # --------------------------------------------------------------------------
  # Simulation (Run for each specified backend)
  # --------------------------------------------------------------------------
  simulate-qiskit:
    # Run after mitigation step completes
    needs: [setup, mitigate] # Needs setup for simulator/shots, mitigate for the IR file
    # Only run if simulator is qiskit (or default)
    if: needs.setup.outputs.simulator == 'qiskit' || needs.setup.outputs.simulator == ''
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        source_file: ${{ fromJson(needs.setup.outputs.source_files) }}
      fail-fast: false
    runs-on: ${{ matrix.os }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'
      - name: Install dependencies
        shell: bash
        run: |
          pip install quantum-cli-sdk qiskit # Ensure qiskit is installed
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
      - name: Configure Git
        run: |
          git config --local user.name "github-actions[bot]"
          git config --local user.email "41898282+github-actions[bot]@users.noreply.github.com"

      - name: Run Qiskit Simulation (Mitigated)
        shell: bash
        run: |
          # Check if input exists
          if [ -f "ir/openqasm/mitigated/${{ matrix.source_file }}.qasm" ]; then
            mkdir -p results/simulation/qiskit
            quantum-cli run simulate \
              ir/openqasm/mitigated/${{ matrix.source_file }}.qasm \
              --backend qiskit \
              --shots ${{ needs.setup.outputs.shots }} \
              --output results/simulation/qiskit/"${{ matrix.source_file }}.json"
            echo "Qiskit simulation completed for ${{ matrix.source_file }} on ${{ matrix.os }}"
          else
            echo "Skipping Qiskit simulation, input file not found: ir/openqasm/mitigated/${{ matrix.source_file }}.qasm on ${{ matrix.os }}"
            mkdir -p results/simulation/qiskit && echo \'{\"status\": \"skipped\", \"reason\": \"Input IR file not found\"}\' > results/simulation/qiskit/"${{ matrix.source_file }}.json"
          fi

      - name: Commit Qiskit Simulation Results
        shell: bash
        run: |
          git add results/simulation/qiskit/"${{ matrix.source_file }}.json"
          if [[ -n $(git status --porcelain results/simulation/qiskit/"${{ matrix.source_file }}.json") ]]; then
            git commit -m "ci: Add Qiskit simulation results for ${{ matrix.source_file }} (OS: ${{ matrix.os }})"
            git push || (sleep 5 && git pull --rebase && git push) || echo "Push failed for Qiskit results ${{ matrix.source_file }} on ${{ matrix.os }}"
          else
            echo "No changes to commit for Qiskit results ${{ matrix.source_file }} on ${{ matrix.os }}"
          fi

  simulate-cirq:
    # Run after mitigation step completes
    needs: [setup, mitigate] # Needs setup for simulator/shots, mitigate for the IR file
    # Only run if simulator is cirq
    if: needs.setup.outputs.simulator == 'cirq'
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        source_file: ${{ fromJson(needs.setup.outputs.source_files) }}
      fail-fast: false
    runs-on: ${{ matrix.os }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'
      - name: Install dependencies
        shell: bash
        run: |
          pip install quantum-cli-sdk cirq # Ensure cirq is installed
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
      - name: Configure Git
        run: |
          git config --local user.name "github-actions[bot]"
          git config --local user.email "41898282+github-actions[bot]@users.noreply.github.com"

      - name: Run Cirq Simulation (Mitigated)
        shell: bash
        run: |
          # Check if input exists
          if [ -f "ir/openqasm/mitigated/${{ matrix.source_file }}.qasm" ]; then
            mkdir -p results/simulation/cirq
            quantum-cli run simulate \
              ir/openqasm/mitigated/${{ matrix.source_file }}.qasm \
              --backend cirq \
              --shots ${{ needs.setup.outputs.shots }} \
              --output results/simulation/cirq/"${{ matrix.source_file }}.json"
            echo "Cirq simulation completed for ${{ matrix.source_file }} on ${{ matrix.os }}"
          else
             echo "Skipping Cirq simulation, input file not found: ir/openqasm/mitigated/${{ matrix.source_file }}.qasm on ${{ matrix.os }}"
             mkdir -p results/simulation/cirq && echo \'{\"status\": \"skipped\", \"reason\": \"Input IR file not found\"}\' > results/simulation/cirq/"${{ matrix.source_file }}.json"
          fi

      - name: Commit Cirq Simulation Results
        shell: bash
        run: |
          git add results/simulation/cirq/"${{ matrix.source_file }}.json"
          if [[ -n $(git status --porcelain results/simulation/cirq/"${{ matrix.source_file }}.json") ]]; then
            git commit -m "ci: Add Cirq simulation results for ${{ matrix.source_file }} (OS: ${{ matrix.os }})"
            git push || (sleep 5 && git pull --rebase && git push) || echo "Push failed for Cirq results ${{ matrix.source_file }} on ${{ matrix.os }}"
          else
            echo "No changes to commit for Cirq results ${{ matrix.source_file }} on ${{ matrix.os }}"
          fi

  simulate-braket:
    # Run after mitigation step completes
    needs: [setup, mitigate] # Needs setup for simulator/shots, mitigate for the IR file
    # Only run if simulator is braket
    if: needs.setup.outputs.simulator == 'braket'
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        source_file: ${{ fromJson(needs.setup.outputs.source_files) }}
      fail-fast: false
    runs-on: ${{ matrix.os }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'
      - name: Install dependencies
        shell: bash
        run: |
          pip install quantum-cli-sdk amazon-braket-sdk # Ensure braket is installed
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
      - name: Configure Git
        run: |
          git config --local user.name "github-actions[bot]"
          git config --local user.email "41898282+github-actions[bot]@users.noreply.github.com"

      - name: Run Braket Simulation (Mitigated)
        shell: bash
        run: |
          # Check if input exists
          if [ -f "ir/openqasm/mitigated/${{ matrix.source_file }}.qasm" ]; then
            mkdir -p results/simulation/braket
            quantum-cli run simulate \
              ir/openqasm/mitigated/${{ matrix.source_file }}.qasm \
              --backend braket \
              --shots ${{ needs.setup.outputs.shots }} \
              --output results/simulation/braket/"${{ matrix.source_file }}.json"
            echo "Braket simulation completed for ${{ matrix.source_file }} on ${{ matrix.os }}"
          else
            echo "Skipping Braket simulation, input file not found: ir/openqasm/mitigated/${{ matrix.source_file }}.qasm on ${{ matrix.os }}"
            mkdir -p results/simulation/braket && echo \'{\"status\": \"skipped\", \"reason\": \"Input IR file not found\"}\' > results/simulation/braket/"${{ matrix.source_file }}.json"
          fi

      - name: Commit Braket Simulation Results
        shell: bash
        run: |
          git add results/simulation/braket/"${{ matrix.source_file }}.json"
          if [[ -n $(git status --porcelain results/simulation/braket/"${{ matrix.source_file }}.json") ]]; then
            git commit -m "ci: Add Braket simulation results for ${{ matrix.source_file }} (OS: ${{ matrix.os }})"
            git push || (sleep 5 && git pull --rebase && git push) || echo "Push failed for Braket results ${{ matrix.source_file }} on ${{ matrix.os }}"
          else
            echo "No changes to commit for Braket results ${{ matrix.source_file }} on ${{ matrix.os }}"
          fi

  # --------------------------------------------------------------------------
  # Test Generation & Execution
  # --------------------------------------------------------------------------
  generate-tests:
    needs: mitigate # Depends on mitigated IR
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        source_file: ${{ fromJson(needs.setup.outputs.source_files) }}
      fail-fast: false
    runs-on: ${{ matrix.os }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'
      - name: Install dependencies
        shell: bash
        run: |
          pip install quantum-cli-sdk pytest # Need pytest for potential test utils
          # Install quantum hardware libraries
          pip install qiskit qiskit-ibm-runtime cirq amazon-braket-sdk
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
      - name: Configure Git
        run: |
          git config --local user.name "github-actions[bot]"
          git config --local user.email "41898282+github-actions[bot]@users.noreply.github.com"

      - name: Generate Tests for Mitigated IR
        shell: bash
        run: |
          # Check if input exists
          if [ -f "ir/openqasm/mitigated/${{ matrix.source_file }}.qasm" ]; then
             mkdir -p tests/generated
             # Ensure output filename is safe, replacing slashes if source_file has subdirs
             TEST_FILENAME=$(echo "${{ matrix.source_file }}" | sed 's/\//_/g')
             quantum-cli test generate \
               ir/openqasm/mitigated/${{ matrix.source_file }}.qasm \
               --output tests/generated/test_"$TEST_FILENAME".py
             echo "Generated tests for ${{ matrix.source_file }} on ${{ matrix.os }}"
          else
            echo "Skipping test generation, input file not found: ir/openqasm/mitigated/${{ matrix.source_file }}.qasm on ${{ matrix.os }}"
            mkdir -p tests/generated # Ensure dir exists
          fi

      - name: Commit Generated Tests
        shell: bash
        run: |
          TEST_FILENAME=$(echo "${{ matrix.source_file }}" | sed 's/\//_/g')
          TEST_FILE_PATH="tests/generated/test_$TEST_FILENAME.py"
          if [ -f "$TEST_FILE_PATH" ]; then
            git add "$TEST_FILE_PATH"
            if [[ -n $(git status --porcelain "$TEST_FILE_PATH") ]]; then
              git commit -m "ci: Generate tests for ${{ matrix.source_file }} (OS: ${{ matrix.os }})"
              git push || (sleep 5 && git pull --rebase && git push) || echo "Push failed for generated tests ${{ matrix.source_file }} on ${{ matrix.os }}"
            else
              echo "No changes to commit for generated tests ${{ matrix.source_file }} on ${{ matrix.os }}"
            fi
          else
            echo "Generated test file not found, skipping commit for ${{ matrix.source_file }} on ${{ matrix.os }}"
          fi

  run-tests:
    needs: generate-tests # Depends on generated tests
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        source_file: ${{ fromJson(needs.setup.outputs.source_files) }}
      fail-fast: false
    runs-on: ${{ matrix.os }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'
      - name: Install dependencies
        shell: bash
        run: |
          pip install quantum-cli-sdk pytest # Ensure pytest is installed
          # Install all backend SDKs needed for tests
          pip install qiskit qiskit-ibm-runtime cirq amazon-braket-sdk
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
      - name: Configure Git
        run: |
          git config --local user.name "github-actions[bot]"
          git config --local user.email "41898282+github-actions[bot]@users.noreply.github.com"

      - name: Run Generated Tests
        shell: bash
        run: |
          TEST_FILENAME=$(echo "${{ matrix.source_file }}" | sed 's/\//_/g')
          TEST_FILE_PATH="tests/generated/test_$TEST_FILENAME.py"
          mkdir -p results/tests # Ensure results dir exists
          if [ -f "$TEST_FILE_PATH" ]; then
            # Run pytest and save results (e.g., JUnit XML)
            pytest "$TEST_FILE_PATH" --junitxml=results/tests/"${TEST_FILENAME}".xml || echo "Pytest failed for $TEST_FILENAME on ${{ matrix.os }}"
            echo "Ran tests for $TEST_FILENAME on ${{ matrix.os }}"
          else
            echo "Skipping test run, test file not found: $TEST_FILE_PATH on ${{ matrix.os }}"
            # Create a placeholder result?
            echo \'<?xml version="1.0" encoding="utf-8"?><testsuites><testsuite name="skipped" errors="1" failures="0" skipped="0" tests="1" time="0.0"><testcase classname="skipped" name="test_file_not_found"><error message="Test file not found: $TEST_FILE_PATH" type="FileNotFoundError"></error></testcase></testsuite></testsuites>\' > results/tests/"${TEST_FILENAME}".xml
          fi

      - name: Commit Test Results
        shell: bash
        run: |
          TEST_FILENAME=$(echo "${{ matrix.source_file }}" | sed 's/\//_/g')
          RESULT_FILE_PATH="results/tests/${TEST_FILENAME}.xml"
          if [ -f "$RESULT_FILE_PATH" ]; then
            git add "$RESULT_FILE_PATH"
            if [[ -n $(git status --porcelain "$RESULT_FILE_PATH") ]]; then
              git commit -m "ci: Add test results for ${{ matrix.source_file }} (OS: ${{ matrix.os }})"
              git push || (sleep 5 && git pull --rebase && git push) || echo "Push failed for test results ${{ matrix.source_file }} on ${{ matrix.os }}"
            else
               echo "No changes to commit for test results ${{ matrix.source_file }} on ${{ matrix.os }}"
            fi
          else
            echo "Test result file not found, skipping commit for ${{ matrix.source_file }} on ${{ matrix.os }}"
          fi

  # --------------------------------------------------------------------------
  # Service Generation & Testing (If Applicable)
  # --------------------------------------------------------------------------
  generate-service:
    needs: mitigate # Depends on mitigated IR
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        source_file: ${{ fromJson(needs.setup.outputs.source_files) }}
      fail-fast: false
    runs-on: ${{ matrix.os }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'
      - name: Set up Docker Buildx # Needed for building service potentially
        uses: docker/setup-buildx-action@v3 # Use v3
      - name: Install dependencies
        shell: bash
        run: |
          pip install quantum-cli-sdk
          # Install quantum hardware libraries
          pip install qiskit qiskit-ibm-runtime cirq amazon-braket-sdk
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
      - name: Configure Git
        run: |
          git config --local user.name "github-actions[bot]"
          git config --local user.email "41898282+github-actions[bot]@users.noreply.github.com"

      - name: Generate Microservice from Mitigated IR
        shell: bash
        run: |
          # Ensure input IR exists
          if [ -f "ir/openqasm/mitigated/${{ matrix.source_file }}.qasm" ]; then
            # Use a safe directory name based on source file
            SERVICE_DIR_NAME=$(echo "${{ matrix.source_file }}" | sed -e 's/\.py$//' -e 's/[\/.]/_/g')
            OUTPUT_DIR="microservice/generated/$SERVICE_DIR_NAME"
            mkdir -p "$OUTPUT_DIR"
            quantum-cli service generate \
              ir/openqasm/mitigated/${{ matrix.source_file }}.qasm \
              --output-dir "$OUTPUT_DIR"
            echo "Generated microservice for ${{ matrix.source_file }} in $OUTPUT_DIR on ${{ matrix.os }}"
          else
            echo "Skipping service generation, input file not found: ir/openqasm/mitigated/${{ matrix.source_file }}.qasm on ${{ matrix.os }}"
            # Still create the potential output dir path structure for consistency?
            SERVICE_DIR_NAME=$(echo "${{ matrix.source_file }}" | sed -e 's/\.py$//' -e 's/[\/.]/_/g')
            mkdir -p "microservice/generated/$SERVICE_DIR_NAME"
          fi

      - name: Commit Generated Microservice
        shell: bash
        run: |
          SERVICE_DIR_NAME=$(echo "${{ matrix.source_file }}" | sed -e 's/\.py$//' -e 's/[\/.]/_/g')
          OUTPUT_DIR="microservice/generated/$SERVICE_DIR_NAME"
          # Check if the directory exists and potentially contains generated files
          if [ -d "$OUTPUT_DIR" ] && [ "$(ls -A $OUTPUT_DIR)" ]; then
             git add "$OUTPUT_DIR"
             if [[ -n $(git status --porcelain "$OUTPUT_DIR") ]]; then
                git commit -m "ci: Generate microservice for ${{ matrix.source_file }} (OS: ${{ matrix.os }})"
                git push || (sleep 5 && git pull --rebase && git push) || echo "Push failed for microservice ${{ matrix.source_file }} on ${{ matrix.os }}"
             else
               echo "No changes to commit for microservice ${{ matrix.source_file }} on ${{ matrix.os }}"
             fi
          else
            echo "Generated microservice directory not found or empty, skipping commit for ${{ matrix.source_file }} on ${{ matrix.os }}"
          fi

  # TODO: Add 'test-service' job similar to generate-service
  # It should depend on 'generate-service', run 'quantum-cli service test-generate',
  # 'quantum-cli service test-run', and commit results. Remember OS matrix.

  # --------------------------------------------------------------------------
  # Packaging & Publishing (If Applicable)
  # --------------------------------------------------------------------------
  package-app:
    needs: [run-tests, generate-service] # Depends on tests passing and service being generated
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        source_file: ${{ fromJson(needs.setup.outputs.source_files) }}
      fail-fast: false
    runs-on: ${{ matrix.os }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'
      - name: Install dependencies
        shell: bash
        run: |
          pip install quantum-cli-sdk
          # Install quantum hardware libraries
          pip install qiskit qiskit-ibm-runtime cirq amazon-braket-sdk
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
      - name: Configure Git
        run: |
          git config --local user.name "github-actions[bot]"
          git config --local user.email "41898282+github-actions[bot]@users.noreply.github.com"

      - name: Package Application
        shell: bash
        run: |
          # Determine service dir based on source file (consistent with generate-service)
          SERVICE_DIR_NAME=$(echo "${{ matrix.source_file }}" | sed -e 's/\.py$//' -e 's/[\/.]/_/g')
          SERVICE_DIR="microservice/generated/$SERVICE_DIR_NAME"
          PACKAGE_DIR="packages/${SERVICE_DIR_NAME}"
          # Check if the service directory exists and is not empty
          if [ -d "$SERVICE_DIR" ] && [ "$(ls -A $SERVICE_DIR)" ]; then
             mkdir -p "$PACKAGE_DIR"
             quantum-cli package create \
               --service-dir "$SERVICE_DIR" \
               --output-dir "$PACKAGE_DIR"
               # Assuming package name might be derived or needs input? Add --name if needed.
             echo "Packaged application for $SERVICE_DIR_NAME on ${{ matrix.os }}"
          else
            echo "Skipping packaging, service directory not found or empty: $SERVICE_DIR on ${{ matrix.os }}"
            mkdir -p "$PACKAGE_DIR" # Ensure dir exists
          fi

      - name: Commit Packaged Application
        shell: bash
        run: |
          SERVICE_DIR_NAME=$(echo "${{ matrix.source_file }}" | sed -e 's/\.py$//' -e 's/[\/.]/_/g')
          PACKAGE_DIR="packages/${SERVICE_DIR_NAME}"
          # Check if package dir exists and contains files
          if [ -d "$PACKAGE_DIR" ] && [ "$(ls -A $PACKAGE_DIR)" ]; then
            git add "$PACKAGE_DIR"
            if [[ -n $(git status --porcelain "$PACKAGE_DIR") ]]; then
               git commit -m "ci: Package application for ${{ matrix.source_file }} (OS: ${{ matrix.os }})"
               git push || (sleep 5 && git pull --rebase && git push) || echo "Push failed for packaged app ${{ matrix.source_file }} on ${{ matrix.os }}"
            else
              echo "No changes to commit for packaged app ${{ matrix.source_file }} on ${{ matrix.os }}"
            fi
          else
            echo "Packaged app directory not found or empty, skipping commit for ${{ matrix.source_file }} on ${{ matrix.os }}"
          fi

  # TODO: Add 'publish-hub' job
  # Should depend on 'package-app', run 'quantum-cli hub publish', requires secrets.
  # Consider running publish only on 'main' branch push and only from one OS (e.g., ubuntu).


# Example final job to collect artifacts (IF we switch from commits in each step)
#  consolidate-results:
#    if: always() # Run even if previous jobs fail to collect logs/partial results
#    runs-on: ubuntu-latest
#    needs: [ generate-ir, validate, security-scan, optimize, mitigate,
#             simulate-qiskit, simulate-cirq, simulate-braket,
#             generate-tests, run-tests,
#             generate-service, package-app ] # Add test-service, publish-hub when added
#    steps:
#      - name: Checkout repository
#        uses: actions/checkout@v4
#        with:
#          token: ${{ secrets.GITHUB_TOKEN }} # Use token with write access
#
#      - name: Download all artifacts
#        uses: actions/download-artifact@v4
#        with:
#          # No specific name, download all
#          path: artifacts # Download all artifacts into an 'artifacts' directory
#
#      - name: Organize downloaded artifacts
#        shell: bash
#        run: |
#          echo "Organizing artifacts..."
#          # Example: Artifacts might be named like 'ir-ubuntu-latest-my_circuit.py'
#          # containing 'ir/openqasm/my_circuit.py.qasm'
#          # This script needs to intelligently move files from artifacts/*/<path> to <path>
#          # find artifacts -mindepth 2 -type f -print -exec sh -c 'mkdir -p $(dirname "{}"); mv "{}" .' \; # Basic concept, needs refinement
#          # This is complex and depends heavily on how artifacts are uploaded.
#          # Need to carefully design artifact upload paths and names.
#          echo "Artifact organization script placeholder"
#
#      - name: Configure Git
#        run: |
#          git config --local user.name "github-actions[bot]"
#          git config --local user.email "41898282+github-actions[bot]@users.noreply.github.com"
#          git pull --rebase # Pull latest changes before committing
#
#      - name: Commit all results
#        run: |
#          git add ir/ results/ tests/ microservice/ packages/ # Add all relevant top-level dirs
#          # Check if there are any changes staged
#          if git diff --staged --quiet; then
#            echo "No changes to commit."
#          else
#            git commit -m "ci: Consolidate results from E2E pipeline run ${{ github.run_id }}"
#            git push || echo "Final push failed"
#          fi

# End of file